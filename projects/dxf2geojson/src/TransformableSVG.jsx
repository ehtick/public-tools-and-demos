import React from 'react'

import TransformControlWidget from './TransformControlWidget'

class TransformableSVG extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      hovering: false
    }

    this.ref = React.createRef()

    this.createInnerSVG = this.createInnerSVG.bind(this)
    this.handleClick = this.handleClick.bind(this)
    this.mouseOver = this.mouseOver.bind(this)
    this.mouseOut = this.mouseOut.bind(this)
  }

  componentDidMount() {
    // Fix a few things on the SVG generated by the DXF library
    var el = this.ref.current
    var containerEl = this.props.containerRef.current
    var svg = el.getElementsByTagName('svg')[0]
    this.setState({ svg: svg })

    var w = svg.getBBox().width
    var h = svg.getBBox().height

    var preScale = Math.min(
      (containerEl.clientWidth * 0.75) / w,
      (containerEl.clientHeight * 0.75) / h
    )

    svg.setAttribute('width', w * preScale)
    svg.setAttribute('height', h * preScale)
  }
  createInnerSVG() {
    return { __html: this.props.doc.svg }
  }
  handleClick() {
    this.props.onSelect(this.props.doc.id)
  }
  mouseOver(e) {
    this.setState({ hovering: true })
    if (this.props.mouseOver) this.props.mouseOver(e)
  }
  mouseOut(e) {
    this.setState({ hovering: false })
    if (this.props.mouseOut) this.props.mouseOut(e)
  }

  render() {
    const transform = this.props.doc.transform
    var visibility =
      this.props.doc.visible && !this.props.doc.pinned ? '' : 'none'
    var transformStyle =
      'translate(' +
      transform.translation.x +
      'px, ' +
      transform.translation.y +
      'px) ' +
      'rotate(' +
      transform.rotation +
      'deg) ' +
      'scale(' +
      transform.scale.x +
      ', ' +
      transform.scale.y +
      ')'

    var classes = [visibility, 'absolute', this.props.active ? 'z3' : 'z2']

    var borderColor = this.state.hovering ? 'border--blue' : 'border--black'
    var svgWrapper = (
      <div
        className={borderColor + ' border events-none'}
        style={{
          backgroundColor:
            'rgba(255,255,255,' + this.props.doc.opacity / 100 + ')'
        }}
        dangerouslySetInnerHTML={this.createInnerSVG()}
      />
    )

    var controlSize = 24 / transform.scale.x
    var offset = 0
    var controls
    if (this.props.active) {
      controls = [
        <TransformControlWidget
          key='tl'
          position='top left'
          type='scale'
          size={controlSize}
          offset={offset}
        />,
        <TransformControlWidget
          key='tr`'
          position='top right'
          type='scale'
          size={controlSize}
          offset={offset}
        />,
        <TransformControlWidget
          key='br'
          position='bottom right'
          type='scale'
          size={controlSize}
          offset={offset}
        />,
        <TransformControlWidget
          key='bl'
          position='bottom left'
          type='scale'
          size={controlSize}
          offset={offset}
        />,

        <TransformControlWidget
          key='tc'
          position='top center'
          type='rotate'
          size={controlSize}
          offset={offset}
        />
      ]
    }
    return (
      <div
        className={classes.join(' ')}
        onClick={this.handleClick}
        onMouseDown={this.props.onMouseDown}
        onMouseOver={this.mouseOver}
        onMouseUp={this.props.onMouseUp}
        onMouseOut={this.mouseOut}
        onMouseMove={this.props.onMouseMove}
        style={{ transform: transformStyle }}
        ref={this.ref}
      >
        {svgWrapper}
        {controls}
      </div>
    )
  }
}

export default TransformableSVG
